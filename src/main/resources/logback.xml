<?xml version="1.0" encoding="UTF-8"?>
<!-- scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
	scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
				当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 定义日志的根目录 (生产环境建议配合环境变量使用绝对路径) -->
	<property name="LOG_HOME" value="E:/test" />
	<!-- <property name="LOG_HOME" value="${catalina.base}/logs" /> -->
	
	<!-- 定义应用名称 -->
	<property name="appName" value="logback-demo"></property>
	
	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--定义控制台输出格式-->
        <encoder charset="utf-8">
			<!-- 日志输出格式：
				%d表示日期时间，
				%thread表示线程名，
				%-5level：级别从左显示5个字符宽度 
				%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
				%msg：日志消息，
				%n是换行符 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
	</appender>


	<!-- 滚动记录文件，按照每天生成日志文件，当达到指定大小也会产生新文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
	
		<!-- 日志文件名 -->
		<file>${LOG_HOME}/${appName}/${appName}_notError.log</file>
		
		<!-- 追加写入 -->
		<append>true</append>
		
		<!-- 级别过滤器 :如果日志级别等于配置级别，过滤器会根据onMath和 onMismatch接收或拒绝日志
			level:设置过滤级别
			onMatch:用于配置符合过滤条件的操作
			onMismatch:用于配置不符合过滤条件的操作
		-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		
		<!-- 临界值过滤器:过滤掉低于指定临界值的日志。 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
		
		<!-- SizeAndTimeBasedRollingPolicy： 滚动策略，它根据时间和文件大小来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 滚动时产生的文件的存放位置及文件名称
			 	%d{yyyy-MM-dd}：按天进行日志滚动 
			 	%i：当文件大小超过maxFileSize时，按照i进行文件滚动 -->
			<fileNamePattern>${LOG_HOME}/${appName}/${appName}_notError-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。
				注意，删除旧文件时， 那些为了归档而创建的目录也会被删除。 -->
			<MaxHistory>50</MaxHistory>
			<!-- 当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动 -->
			<maxFileSize>100MB</maxFileSize>
			<!-- 设置文件总大小 -->
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		
		<!-- 日志输出格式-->
        <encoder charset="utf-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
	</appender>
	
	
    <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}/${appName}_error.log</file>
        <!-- 配置追加写入 -->
        <append>true</append>
        <!-- 配置级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 配置滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${appName}/sys-error-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <MaxHistory>180</MaxHistory>
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <!-- 日志输出格式-->
        <encoder charset="utf-8">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
    </appender>
    	
	<!--日志异步到数据库-->
	<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
		<!-- 日志异步到数据库 -使用jdbc方式 -->
		<!-- <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
			<driverClass>com.mysql.cj.jdbc.Driver</driverClass>
			<url>jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=true</url>
			<user>root</user>
			<password>root</password>
		</connectionSource> -->
		<!-- 日志异步到数据库 -使用连接池方式 -->
		<connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
	       <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
	         <driverClass>com.mysql.cj.jdbc.Driver</driverClass>
	         <jdbcUrl>jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=true</jdbcUrl>
	         <user>root</user>
	         <password>root</password>
	       </dataSource>
		</connectionSource>
	</appender>

	<!-- logger主要用于存放日志对象，也可以定义日志类型、级别 
			name：表示匹配的logger类型前缀，也就是包的前半部分 
			level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR 
			additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出 -->
	<!-- spring logger -->
	<!-- <logger name="cn.zzs" level="error" additivity="false">
	   <appender-ref ref="STDOUT" />
	</logger> -->
    	
    	
	<!-- root与logger是父子关系，没有特别定义则默认为root。 -->
	<root level="debug">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
		<appender-ref ref="FILE-ERROR" />
		<appender-ref ref="DB" />
	</root>
</configuration>